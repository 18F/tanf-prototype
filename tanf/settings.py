"""
Django settings for tanf project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import random
import string
import json
import django

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
def random_generator(size=6, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for x in range(size))

if 'SECRET_KEY' in os.environ:
    SECRET_KEY = os.environ['SECRET_KEY']
else:
    SECRET_KEY = random_generator(100)


# SECURITY WARNING: don't run with debug turned on in production!
if 'DEBUG' in os.environ:
    DEBUG = os.environ['DEBUG']
else:
    DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'upload.apps.UploadConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'uaa_client',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # 'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'uaa_client.middleware.UaaRefreshMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tanf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'tanf/upload/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tanf.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# Set up OATH2 for 2fa stuff.
# You could probably get this going with https://mozilla-django-oidc.readthedocs.io/en/stable/ too.
UAA_AUTH_URL = 'https://login.fr.cloud.gov/oauth/authorize'
UAA_TOKEN_URL = 'https://uaa.fr.cloud.gov/oauth/token'
LOGIN_URL = 'uaa_client:login'
AUTHENTICATION_BACKENDS = ['uaa_client.authentication.UaaBackend']
if django.get_version().startswith('1.8.') or \
        django.get_version().startswith('1.9.') or \
        django.get_version().startswith('2.'):
    MIDDLEWARE_CLASSES = MIDDLEWARE


# configure things set up by cloudfoundry
if 'VCAP_SERVICES' in os.environ:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    servicejson = os.environ['VCAP_SERVICES']
    services = json.loads(servicejson)
    AWS_STORAGE_BUCKET_NAME = services['s3'][0]['credentials']['bucket']
    AWS_S3_REGION_NAME = services['s3'][0]['credentials']['region']
    AWS_ACCESS_KEY_ID = services['s3'][0]['credentials']['access_key_id']
    AWS_SECRET_ACCESS_KEY = services['s3'][0]['credentials']['secret_access_key']
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': services['aws-rds'][0]['credentials']['db_name'],                      
            'USER': services['aws-rds'][0]['credentials']['username'],
            'PASSWORD': services['aws-rds'][0]['credentials']['password'],
            'HOST': services['aws-rds'][0]['credentials']['host'],
            'PORT': services['aws-rds'][0]['credentials']['port'],
        }
    }

    UAA_CLIENT_ID = os.environ['UAA_CLIENT_ID']
    UAA_CLIENT_SECRET = os.environ['UAA_CLIENT_SECRET']
else:
    # we are in local development mode
    MEDIA_ROOT='/tmp/tanf'
    UAA_AUTH_URL = 'fake:'
    UAA_TOKEN_URL = 'fake:'
    UAA_CLIENT_ID = 'fake:'
    UAA_CLIENT_SECRET = 'fake:'
